using GsmComm.PduConverter;
using GsmComm.PduConverter.SmartMessaging;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace SMSapplication
{
    public partial class TESTER : Form
    {
        public TESTER()
        {
            InitializeComponent();
        }

        private void TESTER_Load(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            string baseUrl = "http://easybulksmsbd.com/";
            string apiLink = "pdu-sms";
            PDUMessage messages = new PDUMessage();
            HttpClient _client = new HttpClient();
            _client.BaseAddress = new Uri(baseUrl);
            _client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            // Blocking call!
            HttpResponseMessage result;
            try
            {
                result = _client.GetAsync(apiLink).Result;
                if (result.IsSuccessStatusCode)
                {
                    messages = result.Content.ReadAsAsync<PDUMessage>().Result;
                }
                else
                {
                    MessageBox.Show("Api:: no message found.");
                    return;
                }
                string pduJ = string.Empty;
                foreach (string pduCode in messages.pdu)
                {
                    pduJ += pduCode;
                    txtL.Text = pduCode.GetLen().ToString();
                    txtP.Text = pduCode;
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }


        private void button2_Click(object sender, EventArgs e)
        {
            string buffer = @"
+CMGL: 1,1,,20
0891881007000006F0040D91881037911268F300080201429120334200
+CMGL: 2,1,,149
0891881008010016F22414D0C1B49C5E663FCDE6B21C0008911140215190427E09EF099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E7099C09BF09AC09BF0020098709A809CD099F09BE09B009A809C7099F002C002009ED09A609BF09A8002009AE09C709DF09BE09A6003B002009AE09BE09B809C70020098F099509AC09BE09B0002C002009E709E6002009AE09BE09B80020
+CMGL: 3,1,,30
0891881007000006F0040D91881017455100F60000911150915074420BB0D88D7693C568B2180D
+CMGL: 4,1,,161
0891881008010010F64410D0C2F29C1E2196C36C0008911111816213428C050003410301099509AE0020099F09BE099509BE09DF002009AC09C709B609BF002009AE09C709DF09BE09A600210020000A099F09E8003A002009E909AE09BF002C002009E909E609A609BF09A80020002D002009A109BE09DF09BE09B20020002A09E809E709E8002A09E609E80023002C0020000A099F09EB003A002009EE09AE09BF002C002009E909E6
+CMGL: 5,1,,75
0891881008010010F64410D0C2F29C1E2196C36C00089111118162134236050003410303002C002009E909E609A609BF09A80020002D002009A109BE09DF09BE09B20020002A09E809E709E8002A09E709E60023
+CMGL: 6,1,,161
0891881008010010F64410D0C2F29C1E2196C36C0008911111816213428C05000341030209A609BF09A80020002D002009A109BE09DF09BE09B20020002A09E809E709E8002A09E609EB0023002C0020000A099F09EE003A002009E709E909AE09BF002C002009E909E609A609BF09A80020002D002009A109BE09DF09BE09B20020002A09E809E709E8002A09E609EE0023002C0020000A099F09E709E6003A002009E709EC09AE09BF
+CMGL: 7,1,,139
0891881008010010F62414D0C1B49C5E663FCDE6B21C0008911102116222427409AE09BE09A409CD09B0002009EB09EA099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E9099C09BF09AC09BF0020098709A809CD099F09BE09B009A809C7099F003B002009AF09A4099609C109B609BF002009A409A409AC09BE09B0002C002009E9002009AE09BE09B8
+CMGL: 8,1,,147
0891881008010010F62414D041F5BA2C8F3CCDE6B21C0008911102218545427C098F09DF09BE09B0099F09C709B209C7002009E90020099F09BE099509BE09DF002009EB002009AE09BF09A809BF099F002009B809AC002009A809AE09CD09AC09B009C7002D09E9002009A609BF09A800200986099C0987002009A109BE09DF09BE09B20020002A09E809E709E809EF09E7002A09EF09ED09E60023
+CMGL: 9,1,,147
0891881008010010F62414D041F5BA2C8F3CCDE6B21C0008911102219534427C098F09DF09BE09B0099F09C709B209C7002009E90020099F09BE099509BE09DF002009EB002009AE09BF09A809BF099F002009B809AC002009A809AE09CD09AC09B009C7002D09E9002009A609BF09A800200986099C0987002009A109BE09DF09BE09B20020002A09E809E709E809EF09E7002A09EF09ED09E60023
+CMGL: 10,1,,155
0891881008010016F30410D0CD3C289896D3CB6C00089111023183553286098F09DF09BE09B0099F09C709B209C70020098F099609A8002009E7099C09BF09AC09BF002B09E709EC09E609AE09BF09A809BF099F002C09ED09A609BF09A8003B002009B009BF099A09BE09B009CD099C002009EF09E9099F09BE099509BE0020002809AC09BF099509BE09B609C70993002009AA09CD09B009AF09CB099C09CD09AF0029
+CMGL: 11,1,,150
0891881008010016F2240ED04937BD2C7797E900089111028135644282098F09DF09BE09B0099F09C709B209C700200986099C002009EB00470042002009E709EA002009A609BF09A8002009AE09BE09A409CD09B0002009ED09E70054006B002009B009BF099A09BE09B009CD099C09C700210020002809E6002E09EB004700420020002B002009EA002E09EB00470042002009AC09CB09A809BE09B80029
+CMGL: 12,1,,139
0891881008010016F22414D0C1B49C5E663FCDE6B21C0008911112115280427409AE09BE09A409CD09B0002009EB09EA099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E9099C09BF09AC09BF0020098709A809CD099F09BE09B009A809C7099F003B002009AF09A4099609C109B609BF002009A409A409AC09BE09B0002C002009E9002009AE09BE09B8
+CMGL: 13,1,,139
0891881008010016F22414D0C1B49C5E663FCDE6B21C0008911132311394427409AE09BE09A409CD09B0002009EB09EA099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E9099C09BF09AC09BF0020098709A809CD099F09BE09B009A809C7099F003B002009AF09A4099609C109B609BF002009A409A409AC09BE09B0002C002009E9002009AE09BE09B8
+CMGL: 14,1,,139
0891881008010010F62414D0C1B49C5E663FCDE6B21C0008911152417304427409AE09BE09A409CD09B0002009EB09EA099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E9099C09BF09AC09BF0020098709A809CD099F09BE09B009A809C7099F003B002009AF09A4099609C109B609BF002009A409A409AC09BE09B0002C002009E9002009AE09BE09B8
+CMGL: 15,1,,157
0891881008010016F20410D0C2F29C1E2196C36C00089111527100334288098F09DF09BE09B0099F09C709B209C70020098F099609A8002009E809E609E6098F09AE09AC09BF0020002B002009E709E809EB002009AE09BF09A809BF099F002009ED09A609BF09A8003B002009B009BF099A09BE09B009CD099C0020099F09ED09EA003B002009AC09BF099509BE09B609C70993002009AA09CD09B009AF09CB099C09CD09AF
+CMGL: 16,1,,146
0891881008010016F1240ED04937BD2C7797E90008911152811322427E098F09DF09BE09B0099F09C709B209C700200986099C002009EB00470042002009E709EA002009A609BF09A8002009AE09BE09A409CD09B0002009ED09E70054006B002009B009BF099A09BE09B009CD099C09C700210020002809E6002E09EB00470042002B09EA002E09EB00470042002009AC09CB09A809BE09B80029
+CMGL: 17,1,,139
0891881008010010F62414D0C1B49C5E663FCDE6B21C0008911162115581427409AE09BE09A409CD09B0002009EB09EA099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E9099C09BF09AC09BF0020098709A809CD099F09BE09B009A809C7099F003B002009AF09A4099609C109B609BF002009A409A409AC09BE09B0002C002009E9002009AE09BE09B8
+CMGL: 18,1,,163
0891881008010016F22414D041F5BA2C8F3CCDE6B21C0008911162115542428C09AC09C709B609BF002009AE09C709DF09BE09A600200993002009B809B009CD09AC09A809BF09AE09CD09A8002009B009C7099F0021002009EA09E8099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009EA09EE09AA002F09AE09BF002B099F09CD09AF09BE099509CD09B8002C09AE09C709DF09BE09A6002009E709EB09A609BF09A8
+CMGL: 19,1,,146
0891881008010016F1240ED04937BD2C7797E90008911162711492427E098F09DF09BE09B0099F09C709B209C700200986099C002009EB00470042002009E709EA002009A609BF09A8002009AE09BE09A409CD09B0002009ED09E70054006B002009B009BF099A09BE09B009CD099C09C700210020002809E6002E09EB00470042002B09EA002E09EB00470042002009AC09CB09A809BE09B80029
+CMGL: 20,1,,143
0891881007000006F0000D91881027664202F80000020172316225428CD9F29C054A82EE61371D1406A1DFED32885EA7BFE565D0DB0C7A82D8617199ED0231DFE3303DFD76838E617D1A5E9783C6E8F75D1E56D3C32ED0B42E5697C774900E341DA7CBEE7199056A86E9E8723B4C4F8FE7A0B09B0C2ABACFECF41CED020D99C1E914D40215D367341D6402C1D9E13C0B642CB7C3ECB20B04
+CMGL: 21,1,,35
0891881007000006F0200D91881017122545F300000201729181534211D2F2B89CB69741ED3C681C66B35D20
+CMGL: 22,1,,160
0891881007000006F0440D91881077161673F5000012609100930542A0050003060201926E7A595E9ED3CB649042F9148292449D2C569B35E0F2726B3E46BFDFECB4FB0C5A819647190B55769FD9E9391AD42E93D3F5760A1464B359D3779D8E0609C3647298951E9741637939DC0699C363FA5B9E07B5DFF232AB4664C55C3318924583365935180C465F371AF0373B3C47835AA06198CD7ECDDB731D0816B3CD72321CEC768335A8
+CMGL: 23,1,,40
0891881007000006F0440D91881077161673F500001260910093154216050003060202EA697AFAED06D1CBF276DA1D6603
+CMGL: 24,1,,159
0891881008010016F30414D0C1B49C5E663FCDE6B21C00089111725121933288098F09DF09BE09B0099F09C709B209C7002009B809CD09AA09C709B609BE09B2002009AC09BE09A809CD09A109C709B20020098509AB09BE09B00021002009EF09E809AE09BF09A809BF099F002C09ED09A609BF09A8003B09AA09C709A409C7002009EB09E9099F09BE099509BE002009B009BF099A09BE09B009CD099C0020099509B009C109A8
+CMGL: 25,1,,162
0891881008010016F30412D05374591E8E48C3F4320008911182119273328C09E709E609E6098F09AE09AC09BF0021002009E809EC099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009EB09EA09AA002F09AE09BF002B099F09CD09AF09BE099509CD09B8002C002009EB09A609BF09A8003B002009B809BE09A509C7002009E709E609E6098F09AE09AC09BF002009AB09CD09B009BF002C002009E909A609BF09A8
+CMGL: 26,1,,157
0891881008010010F62410D0C2F29C1E2196C36C00089121102143624288098F09DF09BE09B0099F09C709B209C7002009EB09E6099F09BE099509BE09DF002009E70047004200200993002009EB09E609AE09BF09A809BF099F002009B809AC002009A809AE09CD09AC09B009C7002D09E709E609A609BF09A800200986099C0987002009A109BE09DF09BE09B20020002A09E809E709E809EF09E7002A09EF09EB09E70023
+CMGL: 27,1,,159
0891881008010010F62410D0C2F29C1E2196C36C0008912110214353428A098F09DF09BE09B0099F09C709B209C7002009E709EB099F09BE099509BE09DF002009EB09E709E8004D004200200993002009E809EB09AE09BF09A809BF099F002009B809AC002009A809AE09CD09AC09B009C7002D09EB09A609BF09A800200986099C0987002009A109BE09DF09BE09B20020002A09E809E709E809EF09E7002A09EF09EB09E80023
+CMGL: 28,1,,157
0891881008010016F10410D0CD3C289896D3CB6C00089121105181944288098F09DF09BE09B0099F09C709B209C7002009E709EF09E90020099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E909E909EB09AE09BF002C002009E809E609E60020098F09B8098F09AE098F09B8002009E909E609A609BF09A8003B002009AC09BF099509BE09B609C70993002009AA09CD09B009AF09CB099C09CD09AF
+CMGL: 29,1,,83
0891881007000006F0200D91881017122545F300000201729191824247D2F2B89CB69741ED3C681C66B3410AA8FC6D2ECFE76F39A81956A7C56139481A46B7C36E1748314487D3F276D80D7A9B414121A8EA4EDBCBF2799A9E778100
+CMGL: 30,1,,29
0891881007000006F0000D91881047221554F40000020182410241420ACE371D14A683C26C36
+CMGL: 31,1,,20
07918810990055F7000D91881059428392F700001260313161254200
+CMGL: 32,1,,38
07918810990055F7040D91881089525130F800001260715164934214DABCD8FC36E3D5EE3428CF3E9BD775B31804
+CMGL: 33,1,,25
0891881007000006F0040D91881017860595F000009121205151034205C8329BFD06
+CMGL: 34,1,,24
0891881007000006F0040D91881017762140F70000912120610335420457F4FB07
+CMGL: 35,1,,31
0891881007000006F0040D91881057189138F20000912120719445420C57F41B14969741F977FD07
+CMGL: 36,1,,24
0891881007000006F0040D91881017384091F40000912120913183420477F4FB07
+CMGL: 37,1,,27
0891881008010010F6240D91881026652421F800009121209185554208CB32280C77A77F
+CMGL: 38,1,,28
0791881005519999040D91881035112960F300089121201282224208D83DDE12D83DDE12
+CMGL: 39,1,,24
0891881007000006F0040D91881017926757F700089121301174524204D83EDD19
+CMGL: 40,1,,26
0891881007000006F0240D91881057661331F2000091213021027542064B90AC9DFE01
+CMGL: 41,1,,26
0891881007000006F0040D91881017616719F1000091213051134042064274F87C3E03
+CMGL: 42,1,,135
0891881008010016F30414D0C1B49C5E663FCDE6B21C0008912140418150327009EE099F09BE099509BE09DF002009E700470042002D09ED09A609BF09A8002009A109BE09DF09BE09B20020002A09E809E709E8002A09EE09EE09EE00230020002809E909E7002D09E709E8002D09E709EF0020098F09B0002009AE09A709CD09AF09C7002009E709AC09BE09B00029
+CMGL: 43,1,,160
0891881008010016F1640ED04937BD2C7797E90008912140325503428C050003F703010059006F0075002000680061007600650020007000750072006300680061007300650064002000410069007200740065006C005F004400610074006100200061007400200054006B00200030002E0030002C002000560061006C00690064006900740079003A002000530075006E0020004400650063002000300038002000300030003A0030
+CMGL: 44,1,,160
0891881008010016F1640ED04937BD2C7797E90008912140325503428C050003F703020031003A00300030002000320030003100390028006900730020006E006F00740020006100750074006F002000720065006E0065007700610062006C00650029002E00200054006F00200063006800650063006B00200069006E007400650072006E00650074002000620061006C0061006E006300650020006400690061006C0020002A0033
+CMGL: 45,1,,28
0891881008010016F1640ED04937BD2C7797E900089121403255034208050003F703030023
+CMGL: 46,1,,151
0891881008010016F12414D0C1B49C5E660BDFEEFA1C00089121403255334280098609AA09A809BF002009E809EE0020099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009E709E609E6098F09AE09AC09BF002009AB09CD09B009BF002009AA09C709DF09C7099B09C709A80964002009AE09C709DF09BE09A6002009E9002009A609BF09A809640020099A09C709950020002A09E90023
+CMGL: 47,1,,22
0891881007000006F0000D91881067817789F300000201824134404202CE37
+CMGL: 48,1,,22
0891881007000006F0000D91881067153568F200000201825111454202CE37
+CMGL: 49,1,,143
0891881008010010F62414D041F5BA2C8F3CCDE6B21C00089121500195214278098F09DF09BE09B0099F09C709B209C7002009B809C709B009BE002009B009C7099F0021002009EA09E8099F09BE099509BE002009B009BF099A09BE09B009CD099C09C7002009EA09EB09AA002F09AE09BF002B099F09CD09AF09BE099509CD09B8002C09AE09C709DF09BE09A6002009ED09A609BF09A8
+CMGL: 50,1,,20
0891881007000006F0040D91881047802092F200080201827172204200

OK
";

            string[] arr = buffer.Split(new char[] { '\r', '\n' });
            foreach (string s in arr)
            {
                if (s.StartsWith("08"))
                {
                    IncomingSmsPdu sms = IncomingSmsPdu.Decode(s, true);
                    var smsDeliver = (SmsDeliverPdu)sms;
                    string[] row = { smsDeliver.SCTimestamp.ToString(), smsDeliver.OriginatingAddress, sms.UserDataText };
                }
            }





        }

        private void button3_Click(object sender, EventArgs e)
        {
            string message = txtSent.Text;
            string number = txtSentNo.Text;
            OutgoingSmsPdu[] pdus = null;
            pdus = SmartMessageFactory.CreateConcatTextMessage(message, true, number);
            foreach (var pdu in pdus)
            {

                string str = pdu.ToString();
            }




        }

        private void btnGetLen_Click(object sender, EventArgs e)
        {
            string message = txtGetLen.Text;
            MessageBox.Show(message.GetLen().ToString());
        }

        private void button4_Click(object sender, EventArgs e)
        {
            string str = "JOB ID:4842\r\nC-9,Math,H Math,shahidbag behind the সোনা  hospital,4D,14:00PM,6k\r\nApply: http:tuitionterminal.com.bd job-board job-details 4842\r\nCall: 01826040258";
            string str1 = "হে সোনা হে সোনা ।";

            bool unicode = str.Any(s => s > 255);
            bool unicode1 = str1.Any(s => s > 255);
        }

        private void button5_Click(object sender, EventArgs e)
        {
            string baseUrl = "http://easybulksmsbd.com/";
            string apiLink = "getList";
            Message[] messages = new Message[0];
            HttpClient _client = new HttpClient();
            _client.BaseAddress = new Uri(baseUrl);
            _client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            // Blocking call!
            HttpResponseMessage result;
            try
            {
                result = _client.GetAsync(apiLink).Result;
                if (result.IsSuccessStatusCode)
                {
                    messages = result.Content.ReadAsAsync<Message[]>().Result;
                }
                else
                {
                    MessageBox.Show("Api:: no message found.");
                    return;
                }
                OutgoingSmsPdu[] pdus = null;

                //messages[0].text = messages[0].text.Replace("\r\n\r\n", "\r\n");
                // messages[0].text = messages[0].text.Replace("\n", "");
                bool unicode = messages[0].text.Any(s => s > 255);
                pdus = SmartMessageFactory.CreateConcatTextMessage(messages[0].text, unicode, messages[0].mobile);
                foreach (var pdu in pdus)
                {
                    txtPdh.Text = pdu.ToString();
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }
}
